version: '2.1'

services:

  xmens:
    image: crkjohn/xmens:0.0.1-SNAPSHOT
    container_name: xmens
    environment:
      HOST_KAFKA: kafka
    ports:
      - "8081:8081"
    links:
      - kafka
    depends_on:
      - kafka
  zookeeper:
    container_name: zookeeper
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - 9092:9092
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CREATE_TOPICS=MUTANT:1:1
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      - zookeeper

  dynamodb-local:
    user: root
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    image: "amazon/dynamodb-local:latest"
    container_name: dynamodb-local
    ports:
      - "8000:8000"
    volumes:
      - "./docker/dynamodb:/home/dynamodblocal/data"
    working_dir: /home/dynamodblocal
  init-dynamo:
    image: garland/aws-cli-docker
    command: >
      sh -c "aws dynamodb create-table --table-name stat \
            --attribute-definitions AttributeName=hashKey,AttributeType=S \
            --key-schema AttributeName=hashKey,KeyType=HASH \
            --provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1 \
            --endpoint-url http://172.17.0.1:8000 &&
            aws dynamodb create-table --table-name dna \
            --attribute-definitions AttributeName=idDna,AttributeType=N \
            --key-schema AttributeName=idDna,KeyType=HASH \
            --provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1 \
            --endpoint-url http://172.17.0.1:8000
          "
    links:
      - dynamodb-local
    environment:
      - AWS_ACCESS_KEY_ID=0
      - AWS_SECRET_ACCESS_KEY=0
      - AWS_DEFAULT_REGION=eu-central-1
  redis:
    container_name: sbs_redis
    image: redis:6.2.3
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 30

  portainerXmens:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /portainer-data:/data
    ports:
      - 9999:9000

networks:
  backend:
    driver: bridge